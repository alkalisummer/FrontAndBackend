/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.17
 * Generated at: 2019-04-11 00:48:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex18_005fCookie_005fBasic_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<!-- \n");
      out.write("클라이언트( 로컬 PC 웹 브라우저) : 서버(웹서버 : 메모리, 파일, DB서버)\n");
      out.write("\n");
      out.write("정보(데이터: 자료) 어디에 저장하고 보관할 것이냐 \n");
      out.write("\n");
      out.write("고민: 소멸(일시적, 영속적), 보안요소(정보 중요성)\n");
      out.write("\n");
      out.write("Client(Local PC: 웹 브라우저)\n");
      out.write("1.Cookie (메모리 쿠키, 파일 쿠키(txt: 암호화)) 구분점: 소멸타입 \n");
      out.write("2.Local storage(브라우저 메모리 저장소) : (key:value)\n");
      out.write("\n");
      out.write(">> 영속적으로 저장될 필요 없고 보안적으로 문제가 없는 데이터 \n");
      out.write("\n");
      out.write("Server(WebServer : Tomcat)\n");
      out.write("1.Server memory : session 객체(접속한 사용자 별로 하나씩) -> 임시 \n");
      out.write("2.Server memory : application 객체(접속한 모든 사용자가 공유객체)-> 임시 \n");
      out.write("3.Sever : log.txt 파일기반(영속)\n");
      out.write("4.DB Server -> 영속적, 보안\n");
      out.write("\n");
      out.write(" -->\n");

  Cookie mycookie  = new Cookie("cname","1007"); // 쿠키 객체 생성 , 브라우저를 닫으면 소멸 
   // 내서버에 접속한 클라이언트에게 전달(write)
   response.addCookie(mycookie);

      out.write("\n");
      out.write("서버 설정한 쿠키 이름: ");
      out.print(mycookie.getName() );
      out.write("<br>\n");
      out.write("서버 설정한 값: ");
      out.print( mycookie.getValue() );
      out.write("<br>\n");
      out.write("서버 설정한 쿠키 소멸정보:(-1: 소멸시간 X) :");
      out.print(mycookie.getMaxAge() );
      out.write("<br>\n");
      out.write("<hr>\n");
      out.write("\n");
      out.write("<!-- \n");
      out.write(" 서버가 클라이언트에게 Response 한 cookie  객체 얻어오기 \n");
      out.write(" -->\n");
      out.write("\n");

   Cookie[] cs = request.getCookies(); 
    if(cs !=null || cs.length>0){
    	for(Cookie c : cs){
    		out.print(c.getName()+"<br>");
    		out.print(c.getValue()+"<br>");
    		out.print(c.getMaxAge()+"<br>");
    	}
    }


      out.write("    \n");
      out.write("\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
