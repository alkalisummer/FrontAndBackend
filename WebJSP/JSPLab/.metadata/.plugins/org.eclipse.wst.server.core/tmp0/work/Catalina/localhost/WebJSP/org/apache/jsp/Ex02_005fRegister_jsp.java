/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.17
 * Generated at: 2019-04-09 01:38:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex02_005fRegister_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    ");

    
    /*
     일반적으로: 클라이언트에서 입력된 데이터 받기 
     Tomcat 내장객체 : request, response
     
    
    
    */
     request.setCharacterEncoding("UTF-8"); 
     String uid = request.getParameter("userid"); //단일값
     String pwd = request.getParameter("pwd");//단일값 
     
    String[] hobbys = request.getParameterValues("hobby");
     /* 
     보통 >> JDBC(연결) >>CRUD >> 결과 >> Client 전달 
     
     */
     
    
    
      out.write("\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   <!--  \n");
      out.write(" 1. 이클립스 -> window > perferences > workspace > UTF-8 (Text 기반의 주석 처리)\n");
      out.write(" \n");
      out.write(" 2. window -> perferences -> web > CSS files  -> Encoding (UTF-8)\n");
      out.write("    window -> perferences -> web > HTML files -> Encoding (UTF-8)\n");
      out.write("    window -> perferences -> web > JSP files  -> Encoding (UTF-8)\n");
      out.write("  \n");
      out.write("    TIP)한글 깨짐과 상관 없지만 .... HTML5형식의 JSP 페이지\n");
      out.write(" 3.   window ->  perferences -> web > jsp files -> editor -> template 추가 (new)\n");
      out.write(" \n");
      out.write(" 4.Tomcat(서버 : WAS) 한글 설정\n");
      out.write("   server.xml 서버 설정  (63번째 라인)\n");
      out.write("   <Connector connectionTimeout=\"20000\" \n");
      out.write("              port=\"8090\" \n");
      out.write("              protocol=\"HTTP/1.1\" \n");
      out.write("              redirectPort=\"8443\"/>\n");
      out.write("   \n");
      out.write(" 5.**한글 처리**\n");
      out.write("  전송방식 : GET (Tomcat9 한글 문제 없어요)\n");
      out.write("        -데이터를 받기 전(페이지 상단)\n");
      out.write("        -request.setCharacterEncoding(\"UTF-8\"); \n");
      out.write("        -<Connector URIEncoding=\"UTF-8\" ..... \n");
      out.write("  \n");
      out.write(" 전송방식 : POST \n");
      out.write("        -데이터를 받기 전(페이지 상단)\n");
      out.write("        -request.setCharacterEncoding(\"UTF-8\"); \n");
      out.write("      \n");
      out.write("정리 ) Tomcat 9 ..\n");
      out.write("페이지 상단 :  request.setCharacterEncoding(\"UTF-8\"); \n");
      out.write("그런데 만약 문제가 생기면\n");
      out.write("<Connector URIEncoding=\"UTF-8\" ..... \n");
      out.write(" -->   \n");
      out.write("  \n");
      out.write("   \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("당신의 ID ; ");
      out.print(uid );
      out.write("<br>\n");
      out.write("당신의 PWD: ");
      out.print(pwd);
      out.write("<br>\n");
      out.write("당신의 취미: \n");

  for(String str: hobbys){

      out.write("\t  \n");
      out.write("\t    hobby : ");
      out.print(str);
      out.write("<br>\n");
 
  }



      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
